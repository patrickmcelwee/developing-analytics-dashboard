# Developing the ML Analytics Dashboard

This application is a host application for developing the
[ml-analytics-dashboard-ng](https://github.com/patrickmcelwee/ml-analytics-dashboard-ng)
library. It works with MarkLogic 9. It was generated by the MarkLogic-Node
[Slush](https://github.com/klei/slush) generator, with the following
components:

- [AngularJS](https://angularjs.org/)
- [Gulp](http://gulpjs.com/)
- [node.js](http://nodejs.org/): very thin layer, hosting the Angular code and proxying MarkLogic REST API requests
- [Roxy Deployer](https://github.com/marklogic/roxy): bootstrap MarkLogic databases, application servers, etc; scaffolding for MarkLogic REST API service extensions

## Install Required Dependencies

- [node.js](http://nodejs.org/download/)
- [npm](https://www.npmjs.com/): Built-in package manager for node (comes with
  node, but check to be sure you have latest version: `npm install -g npm`)
- [gulp](http://gulpjs.com/): Javascript task automation (`npm install -g
  gulp`)
- [Bower](http://bower.io/): A package manager for front-end libraries (`npm
  install -g bower`)
- [Git](https://git-scm.com/) - Roxy depends on this version control system
- [Ruby](https://www.ruby-lang.org/en/documentation/installation/) - Roxy
  depends on Ruby in order to run server configuration scripts

# Running the application

    ./ml local bootstrap
    ./ml local deploy modules

On Windows, that would be:

    ml.bat local bootstrap
    ml.bat local deploy modules

Install additional dependencies using the npm and bower package manager:

    npm install
    bower install

Load the sample data, used by automated end-to-end tests, as described in the
[ml-analytics-dashboard-ng
README](https://github.com/patrickmcelwee/ml-analytics-dashboard-ng).

  ./ml local mlcp -options_file import-sample-data.options

Or on Windows:

  ml.bat local mlcp -options_file import-sample-data.options

You can optionally install the Northwind dataset:

    ./ml local deploy_data

On Windows:

    ml.bat local deploy_data

To run a local server on port 3000. Edit `./local.json` to set your desired ports

    gulp serve-local # this will watch the .less file for changes, compile them to .css, and run the node server

# How to actively develop ml-analytics-dashboard-ng using this application

Once it is running, you can link a local version of ml-analytics-dashboard-ng. The `dist/` folder of ml-analytics-dashboard-ng will be actively used. (This means that it will pick up any changes that you have compiled to the `dist/` folder using the `gulp` command in your local ml-analytics-dashboard-ng directory.)

First, navigate to the ml-analytics-dashboard-ng directory and run:

    bower link

Then, return to this developing-analytics-dashboard directory, and run:

    bower link ml-analytics-dashboard-ng

Now, if you examine `bower_components/` in this directory, you should see a symlink to your local version of ml-analytics-dashboard-ng.

# Installation and deployment on server

See INSTALL.md
